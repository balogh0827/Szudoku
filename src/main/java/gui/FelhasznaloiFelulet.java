/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import elemek.Allapot;
import elemek.Tabla;
import funkciok.*;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.InputStream;
import javax.swing.JTextField;
import java.util.*;
import java.util.logging.LogManager;
import java.util.logging.Logger;
import javax.swing.JTextPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

/**
 *
 * @author STARLIGHT
 */
@SuppressWarnings("serial")
public class FelhasznaloiFelulet extends javax.swing.JFrame {
    
    
    static {
        InputStream in = Kezelo.class.getResourceAsStream("/logging.properties");
        if (in != null) {
            try {
                    LogManager.getLogManager().readConfiguration(in);
            } catch(IOException e) {
                    e.printStackTrace();
            }
        }
    }
    
    protected static Logger	logger = Logger.getLogger(FelhasznaloiFelulet.class.getName());
    
    
    private List<JTextField> cellak = new ArrayList<>();
    private List<JTextField> hibás = new ArrayList<>();
    private JTextField aktuális;
    private String aktuálisCellaTartalma = "";
    private Tabla t = new Tabla();
    final int ELEMSZAM = 81;
    private int megadott;
    private int beirt;
    private boolean jatekIndult = false;
    private int lépésSzám;
    private boolean vége = false;
    
    
    /*
       a felület konstruktora
    */
    /**
     * Creates new form FelhasznaloiFelulet
     */
    public FelhasznaloiFelulet() {
        logger.info("Játék elindult.");
        initComponents();
        nullázSzámlálók();
        állapotsor.setText(null);
        lépésSzámCímke.setForeground(Color.getHSBColor(0.24f,1.0f,0.72f));
        lépésSzámláló.setForeground(Color.getHSBColor(0.24f,1.0f,0.72f));
    }

    
    
    /*
        generált kód a felület komponenseinek inicializálásához
    */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        felugróAblak = new javax.swing.JDialog();
        üzenet = new javax.swing.JLabel();
        infoPanel = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();
        jTextField14 = new javax.swing.JTextField();
        jTextField15 = new javax.swing.JTextField();
        jTextField16 = new javax.swing.JTextField();
        jTextField17 = new javax.swing.JTextField();
        jTextField18 = new javax.swing.JTextField();
        jTextField19 = new javax.swing.JTextField();
        jTextField20 = new javax.swing.JTextField();
        jTextField21 = new javax.swing.JTextField();
        jTextField22 = new javax.swing.JTextField();
        jTextField23 = new javax.swing.JTextField();
        jTextField24 = new javax.swing.JTextField();
        jTextField25 = new javax.swing.JTextField();
        jTextField26 = new javax.swing.JTextField();
        jTextField27 = new javax.swing.JTextField();
        jTextField28 = new javax.swing.JTextField();
        jTextField29 = new javax.swing.JTextField();
        jTextField30 = new javax.swing.JTextField();
        jTextField31 = new javax.swing.JTextField();
        jTextField32 = new javax.swing.JTextField();
        jTextField33 = new javax.swing.JTextField();
        jTextField34 = new javax.swing.JTextField();
        jTextField35 = new javax.swing.JTextField();
        jTextField36 = new javax.swing.JTextField();
        jTextField37 = new javax.swing.JTextField();
        jTextField38 = new javax.swing.JTextField();
        jTextField39 = new javax.swing.JTextField();
        jTextField40 = new javax.swing.JTextField();
        jTextField41 = new javax.swing.JTextField();
        jTextField42 = new javax.swing.JTextField();
        jTextField43 = new javax.swing.JTextField();
        jTextField44 = new javax.swing.JTextField();
        jTextField45 = new javax.swing.JTextField();
        jTextField46 = new javax.swing.JTextField();
        jTextField47 = new javax.swing.JTextField();
        jTextField48 = new javax.swing.JTextField();
        jTextField49 = new javax.swing.JTextField();
        jTextField50 = new javax.swing.JTextField();
        jTextField51 = new javax.swing.JTextField();
        jTextField52 = new javax.swing.JTextField();
        jTextField53 = new javax.swing.JTextField();
        jTextField54 = new javax.swing.JTextField();
        jTextField55 = new javax.swing.JTextField();
        jTextField56 = new javax.swing.JTextField();
        jTextField57 = new javax.swing.JTextField();
        jTextField58 = new javax.swing.JTextField();
        jTextField59 = new javax.swing.JTextField();
        jTextField60 = new javax.swing.JTextField();
        jTextField61 = new javax.swing.JTextField();
        jTextField62 = new javax.swing.JTextField();
        jTextField63 = new javax.swing.JTextField();
        jTextField64 = new javax.swing.JTextField();
        jTextField65 = new javax.swing.JTextField();
        jTextField66 = new javax.swing.JTextField();
        jTextField67 = new javax.swing.JTextField();
        jTextField68 = new javax.swing.JTextField();
        jTextField69 = new javax.swing.JTextField();
        jTextField70 = new javax.swing.JTextField();
        jTextField71 = new javax.swing.JTextField();
        jTextField72 = new javax.swing.JTextField();
        jTextField73 = new javax.swing.JTextField();
        jTextField74 = new javax.swing.JTextField();
        jTextField75 = new javax.swing.JTextField();
        jTextField76 = new javax.swing.JTextField();
        jTextField77 = new javax.swing.JTextField();
        jTextField78 = new javax.swing.JTextField();
        jTextField79 = new javax.swing.JTextField();
        jTextField80 = new javax.swing.JTextField();
        jTextField81 = new javax.swing.JTextField();
        állapotsor = new javax.swing.JLabel();
        lépésSzámCímke = new javax.swing.JLabel();
        lépésSzámláló = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        táblázat = new javax.swing.JTable();
        menüsor = new javax.swing.JMenuBar();
        fájlMenü = new javax.swing.JMenu();
        újJátékMenüpont = new javax.swing.JMenuItem();
        játékMentéseMenüpont = new javax.swing.JMenuItem();
        játékBetöltéseMenüpont = new javax.swing.JMenuItem();
        kilépésMenüpont = new javax.swing.JMenuItem();
        műveletekMenü = new javax.swing.JMenu();
        kapcsolódóMezőkMenüpont = new javax.swing.JCheckBoxMenuItem();
        mennyiségMutatásaMenüpont = new javax.swing.JCheckBoxMenuItem();
        játékÚjrakezdéseMenüpont = new javax.swing.JMenuItem();
        súgóMenü = new javax.swing.JMenu();
        útmutatóMenüpont = new javax.swing.JMenuItem();
        névjegyMenüpont = new javax.swing.JMenuItem();

        felugróAblak.setTitle("Játék vége");
        felugróAblak.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        felugróAblak.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        felugróAblak.setForeground(new java.awt.Color(255, 255, 255));
        felugróAblak.setLocation(new java.awt.Point(200, 200));
        felugróAblak.setMinimumSize(new java.awt.Dimension(250, 100));
        felugróAblak.setResizable(false);
        felugróAblak.setSize(new java.awt.Dimension(250, 100));
        felugróAblak.setType(java.awt.Window.Type.POPUP);

        üzenet.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        üzenet.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        üzenet.setText("Gratulálok, Ön nyert!");
        üzenet.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout felugróAblakLayout = new javax.swing.GroupLayout(felugróAblak.getContentPane());
        felugróAblak.getContentPane().setLayout(felugróAblakLayout);
        felugróAblakLayout.setHorizontalGroup(
            felugróAblakLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(felugróAblakLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(üzenet, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        felugróAblakLayout.setVerticalGroup(
            felugróAblakLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(felugróAblakLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(üzenet, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        felugróAblak.getAccessibleContext().setAccessibleDescription("");

        infoPanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        infoPanel.setToolTipText("");
        infoPanel.setPreferredSize(new java.awt.Dimension(400, 500));

        jTextPane1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jTextPane1.setEnabled(false);
        infoPanel.setViewportView(jTextPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sudoku játék 1.0");
        setResizable(false);

        jTextField1.setEditable(false);
        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setAutoscrolls(false);
        jTextField1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField1.setFocusTraversalPolicyProvider(true);
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField2.setEditable(false);
        jTextField2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField2.setAutoscrolls(false);
        jTextField2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField2.setFocusTraversalPolicyProvider(true);
        jTextField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField3.setEditable(false);
        jTextField3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField3.setAutoscrolls(false);
        jTextField3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField3.setFocusTraversalPolicyProvider(true);
        jTextField3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField4.setEditable(false);
        jTextField4.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField4.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField4.setAutoscrolls(false);
        jTextField4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField4.setFocusTraversalPolicyProvider(true);
        jTextField4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField5.setEditable(false);
        jTextField5.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField5.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField5.setAutoscrolls(false);
        jTextField5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField5.setFocusTraversalPolicyProvider(true);
        jTextField5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField6.setEditable(false);
        jTextField6.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField6.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField6.setAutoscrolls(false);
        jTextField6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField6.setFocusTraversalPolicyProvider(true);
        jTextField6.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField7.setEditable(false);
        jTextField7.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField7.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField7.setAutoscrolls(false);
        jTextField7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField7.setFocusTraversalPolicyProvider(true);
        jTextField7.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField8.setEditable(false);
        jTextField8.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField8.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField8.setAutoscrolls(false);
        jTextField8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField8.setFocusTraversalPolicyProvider(true);
        jTextField8.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField8.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField9.setEditable(false);
        jTextField9.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField9.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField9.setAutoscrolls(false);
        jTextField9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField9.setFocusTraversalPolicyProvider(true);
        jTextField9.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField9.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField10.setEditable(false);
        jTextField10.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField10.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField10.setAutoscrolls(false);
        jTextField10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField10.setFocusTraversalPolicyProvider(true);
        jTextField10.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField10.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField11.setEditable(false);
        jTextField11.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField11.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField11.setAutoscrolls(false);
        jTextField11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField11.setFocusTraversalPolicyProvider(true);
        jTextField11.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField11.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField12.setEditable(false);
        jTextField12.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField12.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField12.setAutoscrolls(false);
        jTextField12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField12.setFocusTraversalPolicyProvider(true);
        jTextField12.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField12.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField13.setEditable(false);
        jTextField13.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField13.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField13.setAutoscrolls(false);
        jTextField13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField13.setFocusTraversalPolicyProvider(true);
        jTextField13.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField13.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField14.setEditable(false);
        jTextField14.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField14.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField14.setAutoscrolls(false);
        jTextField14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField14.setFocusTraversalPolicyProvider(true);
        jTextField14.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField14.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField15.setEditable(false);
        jTextField15.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField15.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField15.setAutoscrolls(false);
        jTextField15.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField15.setFocusTraversalPolicyProvider(true);
        jTextField15.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField15.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField16.setEditable(false);
        jTextField16.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField16.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField16.setAutoscrolls(false);
        jTextField16.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField16.setFocusTraversalPolicyProvider(true);
        jTextField16.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField16.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField17.setEditable(false);
        jTextField17.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField17.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField17.setAutoscrolls(false);
        jTextField17.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField17.setFocusTraversalPolicyProvider(true);
        jTextField17.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField17.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField18.setEditable(false);
        jTextField18.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField18.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField18.setAutoscrolls(false);
        jTextField18.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField18.setFocusTraversalPolicyProvider(true);
        jTextField18.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField18.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField19.setEditable(false);
        jTextField19.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField19.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField19.setAutoscrolls(false);
        jTextField19.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField19.setFocusTraversalPolicyProvider(true);
        jTextField19.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField19.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField20.setEditable(false);
        jTextField20.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField20.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField20.setAutoscrolls(false);
        jTextField20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField20.setFocusTraversalPolicyProvider(true);
        jTextField20.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField20.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField21.setEditable(false);
        jTextField21.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField21.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField21.setAutoscrolls(false);
        jTextField21.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField21.setFocusTraversalPolicyProvider(true);
        jTextField21.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField21.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField22.setEditable(false);
        jTextField22.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField22.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField22.setAutoscrolls(false);
        jTextField22.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField22.setFocusTraversalPolicyProvider(true);
        jTextField22.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField22.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField23.setEditable(false);
        jTextField23.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField23.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField23.setAutoscrolls(false);
        jTextField23.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField23.setFocusTraversalPolicyProvider(true);
        jTextField23.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField23.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField24.setEditable(false);
        jTextField24.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField24.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField24.setAutoscrolls(false);
        jTextField24.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField24.setFocusTraversalPolicyProvider(true);
        jTextField24.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField24.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField25.setEditable(false);
        jTextField25.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField25.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField25.setAutoscrolls(false);
        jTextField25.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField25.setFocusTraversalPolicyProvider(true);
        jTextField25.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField25.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField26.setEditable(false);
        jTextField26.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField26.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField26.setAutoscrolls(false);
        jTextField26.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField26.setFocusTraversalPolicyProvider(true);
        jTextField26.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField26.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField27.setEditable(false);
        jTextField27.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField27.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField27.setAutoscrolls(false);
        jTextField27.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField27.setFocusTraversalPolicyProvider(true);
        jTextField27.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField27.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField28.setEditable(false);
        jTextField28.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField28.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField28.setAutoscrolls(false);
        jTextField28.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField28.setFocusTraversalPolicyProvider(true);
        jTextField28.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField28.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField29.setEditable(false);
        jTextField29.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField29.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField29.setAutoscrolls(false);
        jTextField29.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField29.setFocusTraversalPolicyProvider(true);
        jTextField29.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField29.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField30.setEditable(false);
        jTextField30.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField30.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField30.setAutoscrolls(false);
        jTextField30.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField30.setFocusTraversalPolicyProvider(true);
        jTextField30.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField30.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField31.setEditable(false);
        jTextField31.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField31.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField31.setAutoscrolls(false);
        jTextField31.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField31.setFocusTraversalPolicyProvider(true);
        jTextField31.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField31.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField32.setEditable(false);
        jTextField32.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField32.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField32.setAutoscrolls(false);
        jTextField32.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField32.setFocusTraversalPolicyProvider(true);
        jTextField32.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField32.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField33.setEditable(false);
        jTextField33.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField33.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField33.setAutoscrolls(false);
        jTextField33.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField33.setFocusTraversalPolicyProvider(true);
        jTextField33.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField33.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField34.setEditable(false);
        jTextField34.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField34.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField34.setAutoscrolls(false);
        jTextField34.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField34.setFocusTraversalPolicyProvider(true);
        jTextField34.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField34.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField35.setEditable(false);
        jTextField35.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField35.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField35.setAutoscrolls(false);
        jTextField35.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField35.setFocusTraversalPolicyProvider(true);
        jTextField35.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField35.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField36.setEditable(false);
        jTextField36.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField36.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField36.setAutoscrolls(false);
        jTextField36.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField36.setFocusTraversalPolicyProvider(true);
        jTextField36.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField36.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField37.setEditable(false);
        jTextField37.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField37.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField37.setAutoscrolls(false);
        jTextField37.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField37.setFocusTraversalPolicyProvider(true);
        jTextField37.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField37.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField38.setEditable(false);
        jTextField38.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField38.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField38.setAutoscrolls(false);
        jTextField38.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField38.setFocusTraversalPolicyProvider(true);
        jTextField38.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField38.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField39.setEditable(false);
        jTextField39.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField39.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField39.setAutoscrolls(false);
        jTextField39.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField39.setFocusTraversalPolicyProvider(true);
        jTextField39.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField39.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField40.setEditable(false);
        jTextField40.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField40.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField40.setAutoscrolls(false);
        jTextField40.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField40.setFocusTraversalPolicyProvider(true);
        jTextField40.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField40.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField41.setEditable(false);
        jTextField41.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField41.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField41.setAutoscrolls(false);
        jTextField41.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField41.setFocusTraversalPolicyProvider(true);
        jTextField41.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField41.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField42.setEditable(false);
        jTextField42.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField42.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField42.setAutoscrolls(false);
        jTextField42.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField42.setFocusTraversalPolicyProvider(true);
        jTextField42.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField42.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField43.setEditable(false);
        jTextField43.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField43.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField43.setAutoscrolls(false);
        jTextField43.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField43.setFocusTraversalPolicyProvider(true);
        jTextField43.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField43.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField44.setEditable(false);
        jTextField44.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField44.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField44.setAutoscrolls(false);
        jTextField44.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField44.setFocusTraversalPolicyProvider(true);
        jTextField44.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField44.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField45.setEditable(false);
        jTextField45.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField45.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField45.setAutoscrolls(false);
        jTextField45.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField45.setFocusTraversalPolicyProvider(true);
        jTextField45.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField45.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField46.setEditable(false);
        jTextField46.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField46.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField46.setAutoscrolls(false);
        jTextField46.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField46.setFocusTraversalPolicyProvider(true);
        jTextField46.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField46.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField47.setEditable(false);
        jTextField47.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField47.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField47.setAutoscrolls(false);
        jTextField47.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField47.setFocusTraversalPolicyProvider(true);
        jTextField47.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField47.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField48.setEditable(false);
        jTextField48.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField48.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField48.setAutoscrolls(false);
        jTextField48.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField48.setFocusTraversalPolicyProvider(true);
        jTextField48.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField48.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField49.setEditable(false);
        jTextField49.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField49.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField49.setAutoscrolls(false);
        jTextField49.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField49.setFocusTraversalPolicyProvider(true);
        jTextField49.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField49.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField50.setEditable(false);
        jTextField50.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField50.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField50.setAutoscrolls(false);
        jTextField50.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField50.setFocusTraversalPolicyProvider(true);
        jTextField50.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField50.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField51.setEditable(false);
        jTextField51.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField51.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField51.setAutoscrolls(false);
        jTextField51.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField51.setFocusTraversalPolicyProvider(true);
        jTextField51.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField51.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField52.setEditable(false);
        jTextField52.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField52.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField52.setAutoscrolls(false);
        jTextField52.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField52.setFocusTraversalPolicyProvider(true);
        jTextField52.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField52.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField53.setEditable(false);
        jTextField53.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField53.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField53.setAutoscrolls(false);
        jTextField53.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField53.setFocusTraversalPolicyProvider(true);
        jTextField53.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField53.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField54.setEditable(false);
        jTextField54.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField54.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField54.setAutoscrolls(false);
        jTextField54.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField54.setFocusTraversalPolicyProvider(true);
        jTextField54.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField54.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField55.setEditable(false);
        jTextField55.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField55.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField55.setAutoscrolls(false);
        jTextField55.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField55.setFocusTraversalPolicyProvider(true);
        jTextField55.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField55.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField56.setEditable(false);
        jTextField56.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField56.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField56.setAutoscrolls(false);
        jTextField56.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField56.setFocusTraversalPolicyProvider(true);
        jTextField56.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField56.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField57.setEditable(false);
        jTextField57.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField57.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField57.setAutoscrolls(false);
        jTextField57.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField57.setFocusTraversalPolicyProvider(true);
        jTextField57.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField57.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField58.setEditable(false);
        jTextField58.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField58.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField58.setAutoscrolls(false);
        jTextField58.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField58.setFocusTraversalPolicyProvider(true);
        jTextField58.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField58.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField59.setEditable(false);
        jTextField59.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField59.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField59.setAutoscrolls(false);
        jTextField59.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField59.setFocusTraversalPolicyProvider(true);
        jTextField59.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField59.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField60.setEditable(false);
        jTextField60.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField60.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField60.setAutoscrolls(false);
        jTextField60.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField60.setFocusTraversalPolicyProvider(true);
        jTextField60.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField60.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField61.setEditable(false);
        jTextField61.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField61.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField61.setAutoscrolls(false);
        jTextField61.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField61.setFocusTraversalPolicyProvider(true);
        jTextField61.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField61.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField62.setEditable(false);
        jTextField62.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField62.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField62.setAutoscrolls(false);
        jTextField62.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField62.setFocusTraversalPolicyProvider(true);
        jTextField62.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField62.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField63.setEditable(false);
        jTextField63.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField63.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField63.setAutoscrolls(false);
        jTextField63.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField63.setFocusTraversalPolicyProvider(true);
        jTextField63.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField63.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField64.setEditable(false);
        jTextField64.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField64.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField64.setAutoscrolls(false);
        jTextField64.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField64.setFocusTraversalPolicyProvider(true);
        jTextField64.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField64.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField65.setEditable(false);
        jTextField65.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField65.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField65.setAutoscrolls(false);
        jTextField65.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField65.setFocusTraversalPolicyProvider(true);
        jTextField65.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField65.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField66.setEditable(false);
        jTextField66.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField66.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField66.setAutoscrolls(false);
        jTextField66.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField66.setFocusTraversalPolicyProvider(true);
        jTextField66.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField66.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField67.setEditable(false);
        jTextField67.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField67.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField67.setAutoscrolls(false);
        jTextField67.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField67.setFocusTraversalPolicyProvider(true);
        jTextField67.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField67.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField68.setEditable(false);
        jTextField68.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField68.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField68.setAutoscrolls(false);
        jTextField68.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField68.setFocusTraversalPolicyProvider(true);
        jTextField68.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField68.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField69.setEditable(false);
        jTextField69.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField69.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField69.setAutoscrolls(false);
        jTextField69.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField69.setFocusTraversalPolicyProvider(true);
        jTextField69.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField69.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField70.setEditable(false);
        jTextField70.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField70.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField70.setAutoscrolls(false);
        jTextField70.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField70.setFocusTraversalPolicyProvider(true);
        jTextField70.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField70.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField71.setEditable(false);
        jTextField71.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField71.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField71.setAutoscrolls(false);
        jTextField71.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField71.setFocusTraversalPolicyProvider(true);
        jTextField71.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField71.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField72.setEditable(false);
        jTextField72.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField72.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField72.setAutoscrolls(false);
        jTextField72.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField72.setFocusTraversalPolicyProvider(true);
        jTextField72.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField72.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField73.setEditable(false);
        jTextField73.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField73.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField73.setAutoscrolls(false);
        jTextField73.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField73.setFocusTraversalPolicyProvider(true);
        jTextField73.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField73.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField74.setEditable(false);
        jTextField74.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField74.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField74.setAutoscrolls(false);
        jTextField74.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField74.setFocusTraversalPolicyProvider(true);
        jTextField74.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField74.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField75.setEditable(false);
        jTextField75.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField75.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField75.setAutoscrolls(false);
        jTextField75.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField75.setFocusTraversalPolicyProvider(true);
        jTextField75.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField75.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField76.setEditable(false);
        jTextField76.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField76.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField76.setAutoscrolls(false);
        jTextField76.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField76.setFocusTraversalPolicyProvider(true);
        jTextField76.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField76.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField77.setEditable(false);
        jTextField77.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField77.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField77.setAutoscrolls(false);
        jTextField77.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField77.setFocusTraversalPolicyProvider(true);
        jTextField77.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField77.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField78.setEditable(false);
        jTextField78.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField78.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField78.setAutoscrolls(false);
        jTextField78.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField78.setFocusTraversalPolicyProvider(true);
        jTextField78.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField78.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField79.setEditable(false);
        jTextField79.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField79.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField79.setAutoscrolls(false);
        jTextField79.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField79.setFocusTraversalPolicyProvider(true);
        jTextField79.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField79.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField80.setEditable(false);
        jTextField80.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField80.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField80.setAutoscrolls(false);
        jTextField80.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField80.setFocusTraversalPolicyProvider(true);
        jTextField80.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField80.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        jTextField81.setEditable(false);
        jTextField81.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jTextField81.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField81.setAutoscrolls(false);
        jTextField81.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField81.setFocusTraversalPolicyProvider(true);
        jTextField81.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jTextField81.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTextFieldKeyReleased(evt);
            }
        });

        állapotsor.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        állapotsor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        állapotsor.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        lépésSzámCímke.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lépésSzámCímke.setText("Lépések száma:");
        lépésSzámCímke.setEnabled(false);
        lépésSzámCímke.setFocusable(false);
        lépésSzámCímke.setInheritsPopupMenu(false);
        lépésSzámCímke.setRequestFocusEnabled(false);
        lépésSzámCímke.setVerifyInputWhenFocusTarget(false);

        lépésSzámláló.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lépésSzámláló.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(31, 61, 17), 1, true));
        lépésSzámláló.setEnabled(false);
        lépésSzámláló.setFocusable(false);
        lépésSzámláló.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        lépésSzámláló.setInheritsPopupMenu(false);
        lépésSzámláló.setRequestFocusEnabled(false);
        lépésSzámláló.setVerifyInputWhenFocusTarget(false);

        táblázat.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        táblázat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", ""},
                {"2", ""},
                {"3", ""},
                {"4", ""},
                {"5", ""},
                {"6", ""},
                {"7", ""},
                {"8", ""},
                {"9", ""}
            },
            new String [] {
                "Számjegy", "Beírandó"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        táblázat.setAutoscrolls(false);
        táblázat.setFocusable(false);
        táblázat.setRequestFocusEnabled(false);
        táblázat.setRowHeight(41);
        táblázat.setRowMargin(0);
        táblázat.setRowSelectionAllowed(false);
        táblázat.getTableHeader().setResizingAllowed(false);
        táblázat.getTableHeader().setReorderingAllowed(false);
        táblázat.setUpdateSelectionOnSort(false);
        táblázat.setVerifyInputWhenFocusTarget(false);
        jScrollPane1.setViewportView(táblázat);

        menüsor.setFocusable(false);
        menüsor.setRequestFocusEnabled(false);

        fájlMenü.setMnemonic('f');
        fájlMenü.setText("Fájl");
        fájlMenü.setFocusable(false);
        fájlMenü.setRequestFocusEnabled(false);
        fájlMenü.setVerifyInputWhenFocusTarget(false);

        újJátékMenüpont.setMnemonic('\u00fa');
        újJátékMenüpont.setText("Új játék");
        újJátékMenüpont.setRequestFocusEnabled(false);
        újJátékMenüpont.setVerifyInputWhenFocusTarget(false);
        újJátékMenüpont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                újJátékMenüpontActionPerformed(evt);
            }
        });
        fájlMenü.add(újJátékMenüpont);

        játékMentéseMenüpont.setText("Játék mentése");
        játékMentéseMenüpont.setEnabled(false);
        játékMentéseMenüpont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                játékMentéseMenüpontActionPerformed(evt);
            }
        });
        fájlMenü.add(játékMentéseMenüpont);

        játékBetöltéseMenüpont.setText("Játék betöltése");
        játékBetöltéseMenüpont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                játékBetöltéseMenüpontActionPerformed(evt);
            }
        });
        fájlMenü.add(játékBetöltéseMenüpont);

        kilépésMenüpont.setMnemonic('k');
        kilépésMenüpont.setText("Kilépés");
        kilépésMenüpont.setRequestFocusEnabled(false);
        kilépésMenüpont.setVerifyInputWhenFocusTarget(false);
        kilépésMenüpont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kilépésMenüpontActionPerformed(evt);
            }
        });
        fájlMenü.add(kilépésMenüpont);

        menüsor.add(fájlMenü);

        műveletekMenü.setMnemonic('m');
        műveletekMenü.setText("Műveletek");
        műveletekMenü.setEnabled(false);
        műveletekMenü.setFocusable(false);
        műveletekMenü.setRequestFocusEnabled(false);
        műveletekMenü.setVerifyInputWhenFocusTarget(false);

        kapcsolódóMezőkMenüpont.setText("Kapcsolódó mezők mutatása");
        kapcsolódóMezőkMenüpont.setRequestFocusEnabled(false);
        kapcsolódóMezőkMenüpont.setVerifyInputWhenFocusTarget(false);
        kapcsolódóMezőkMenüpont.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxItemStateChanged(evt);
            }
        });
        műveletekMenü.add(kapcsolódóMezőkMenüpont);

        mennyiségMutatásaMenüpont.setText("Mennyiségek mutatása");
        mennyiségMutatásaMenüpont.setRequestFocusEnabled(false);
        mennyiségMutatásaMenüpont.setVerifyInputWhenFocusTarget(false);
        mennyiségMutatásaMenüpont.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mennyiségMutatásaMenüpontItemStateChanged(evt);
            }
        });
        műveletekMenü.add(mennyiségMutatásaMenüpont);

        játékÚjrakezdéseMenüpont.setMnemonic('t');
        játékÚjrakezdéseMenüpont.setText("Aktuális játék újrakezdése");
        játékÚjrakezdéseMenüpont.setRequestFocusEnabled(false);
        játékÚjrakezdéseMenüpont.setVerifyInputWhenFocusTarget(false);
        játékÚjrakezdéseMenüpont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                játékÚjrakezdéseMenüpontActionPerformed(evt);
            }
        });
        műveletekMenü.add(játékÚjrakezdéseMenüpont);

        menüsor.add(műveletekMenü);

        súgóMenü.setMnemonic('s');
        súgóMenü.setText("Súgó");
        súgóMenü.setFocusable(false);
        súgóMenü.setRequestFocusEnabled(false);
        súgóMenü.setVerifyInputWhenFocusTarget(false);

        útmutatóMenüpont.setMnemonic('h');
        útmutatóMenüpont.setText("Használati útmutató");
        útmutatóMenüpont.setRequestFocusEnabled(false);
        útmutatóMenüpont.setVerifyInputWhenFocusTarget(false);
        útmutatóMenüpont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                útmutatóMenüpontActionPerformed(evt);
            }
        });
        súgóMenü.add(útmutatóMenüpont);

        névjegyMenüpont.setText("Névjegy");
        súgóMenü.add(névjegyMenüpont);

        menüsor.add(súgóMenü);

        setJMenuBar(menüsor);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField20, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField21, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField24, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField25, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField26, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField27, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField73, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField74, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField75, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField76, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField77, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField78, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField79, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField80, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField81, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField64, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField65, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField66, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField67, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField68, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField69, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField70, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField71, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField72, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField46, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField47, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField48, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField49, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField50, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField51, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField52, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField53, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField54, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField37, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField38, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField39, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField40, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField41, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField42, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField43, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField44, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField45, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField28, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField29, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField30, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField31, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField32, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField33, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField34, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField35, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField36, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField55, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField56, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField57, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField58, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField59, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField60, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField61, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField62, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField63, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(állapotsor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(lépésSzámCímke)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lépésSzámláló, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lépésSzámCímke, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                    .addComponent(lépésSzámláló, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField20, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField21, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField24, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField25, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField26, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField27, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField28, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField29, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField30, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField31, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField32, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField33, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField34, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField35, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField36, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField37, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField38, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField39, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField40, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField41, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField42, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField43, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField44, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField45, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField46, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField47, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField48, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField49, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField50, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField51, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField52, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField53, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField54, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField55, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField56, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField57, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField58, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField59, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField60, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField61, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField62, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField63, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField64, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField65, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField66, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField67, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField68, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField69, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField70, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField71, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField72, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField73, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField74, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField75, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField76, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField77, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField78, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField79, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField80, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField81, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addComponent(állapotsor, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /*
        "Kilépés" menüpont figyelője
    */
    private void kilépésMenüpontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kilépésMenüpontActionPerformed
        logger.info("Kilépés a játékból.");
        System.exit(0);
    }//GEN-LAST:event_kilépésMenüpontActionPerformed

    
    /*
        "új játék" menüpont figyelője
    */
    private void újJátékMenüpontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_újJátékMenüpontActionPerformed
        logger.info("Új játék indítása.");
        Kezelo.kiürit(t);
        hibás.clear();
        jatekIndult = true;
        nullázSzámlálók();
        feltolt();
        betolt();
        frissítÁllapotsor();
        lépésSzámláló.setText(String.valueOf(lépésSzám));
        műveletekMenü.setEnabled(true);
        játékÚjrakezdéseMenüpont.setEnabled(true);
        kapcsolódóMezőkMenüpont.setEnabled(true);
        mennyiségMutatásaMenüpont.setEnabled(true);
        játékMentéseMenüpont.setEnabled(true);
        lépésSzámCímke.setEnabled(true);
        lépésSzámláló.setEnabled(true);
        logger.info("Az új játék elindult.");
        
    }//GEN-LAST:event_újJátékMenüpontActionPerformed

    
    
    /*
        "Aktuális játék újrakezdése" menüpont figyelője
    */
    private void játékÚjrakezdéseMenüpontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_játékÚjrakezdéseMenüpontActionPerformed
        logger.info("Játék újrakezdése.");
        Kezelo.kiürit(t);
        hibás.clear();
        nullázSzámlálók();
        betolt();
        lépésSzámláló.setText(String.valueOf(lépésSzám));
        frissítÁllapotsor();
        Kezelo.frissítDarabszám(t);
        frissítTáblázat();
    }//GEN-LAST:event_játékÚjrakezdéseMenüpontActionPerformed

    
    /*
        JTextField billentyűleütés figyelője + játék vége megállapítása és további műveletek
    */
    private void JTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JTextFieldKeyReleased

        frissítÁllapotsor();
        
                
        if(!jatekIndult){
            return;
        }
        
        lépésSzám++;
        lépésSzámláló.setText(String.valueOf(lépésSzám));
        
        
        
        if(aktuális.getFont().isBold()){
            állapotsor.setForeground(Color.RED);
            állapotsor.setText("A cella tartalma nem módosítható!");
            return;
        }
        
        
        //enter kezelése
        if(evt.getKeyChar() == KeyEvent.VK_ENTER){
            evt.consume();
            return;
        }
        
        
        //backspace kezelése
        if(evt.getKeyChar() == KeyEvent.VK_BACK_SPACE){

            int index = cellak.indexOf(aktuális);

            // üres cella
            if(t.getAktuálisCella(index/9 + 1, index%9 + 1).getÁllapot() == Allapot.ÜRES){
                if(hibás.contains(aktuális)){
                    hibás.remove(aktuális);
                }
                
                aktuális.setToolTipText(null);
                aktuális.setBackground(getAktuálisHáttérszín());
                állapotsor.setForeground(Color.BLUE);
                frissítÁllapotsor();
                return;
            }
            
           

            t.getAktuálisCella(index/9 + 1, index%9 + 1).setTartalom("");
            aktuális.setText("");
            aktuálisCellaTartalma = "";
            aktuális.setBackground(getAktuálisHáttérszín());
            beirt--;
            állapotsor.setForeground(Color.BLUE);
            frissítÁllapotsor();
            Kezelo.frissítDarabszám(t);
            frissítTáblázat();
           // keresMárNemHibásCella();

            return;
        }
        
        //egyéb billentyű kezelése 
        if(!Character.isDigit(evt.getKeyChar()) || evt.getKeyChar() == '0'){
           int index = cellak.indexOf(aktuális);
           
            if(aktuális.getBackground() != Color.RED){
                
                if(t.getAktuálisCella(index/9 + 1, index%9 + 1).getÁllapot() == Allapot.ÜRES){
                    aktuális.setText("");
                    aktuálisCellaTartalma = "";
                }

                if(t.getAktuálisCella(index/9 + 1, index%9 + 1).getÁllapot() == Allapot.KITÖLTÖTT){
                    aktuális.setText(t.getAktuálisCella(index/9 + 1, index%9 + 1).getTartalom());
                    aktuálisCellaTartalma = aktuális.getText();
                }   
            }

            állapotsor.setForeground(Color.RED);
            állapotsor.setText("Hibás billentyű!  -  " + KeyEvent.getKeyText(evt.getKeyCode()));
            return;
        }else{          //1-9 számjegyek
            int index = cellak.indexOf(aktuális);
            if(aktuális.getBackground() == Color.RED){
                return;
            }
            Allapot aktualisAllapot = t.getAktuálisCella(index/9 + 1, index%9 + 1).getÁllapot();
            if(aktualisAllapot != Allapot.ÜRES ){
                   return;
            }
            else{
                
                int érték = Kezelo.beír(t, index/9 + 1, index%9 + 1, String.valueOf(evt.getKeyChar()));
                if(érték != 0 ){        //nem sikerül beírni, mert hiba van
                    String hibaLeírás = "";
                    
                    switch(érték){
                        case -1: 
                            hibaLeírás = "Ebben a sorban már van ilyen szám!";
                            break;
                        case -2: 
                            hibaLeírás = "Ebben az oszlopban már van ilyen szám!";
                            break;
                        case -3: 
                            hibaLeírás = "Ebben a rekeszben már van ilyen szám!";
                            break;
                    }
                    aktuálisCellaTartalma = aktuális.getText();
                    aktuális.setToolTipText(hibaLeírás);
                    aktuális.setBackground(Color.RED);
                    hibás.add(aktuális);
                    állapotsor.setForeground(Color.RED);
                    állapotsor.setText(hibaLeírás);
                    return;
                }else{
                    if(hibás.contains(aktuális)){
                        hibás.remove(aktuális);
                    }
                    
                    aktuálisCellaTartalma = aktuális.getText();
                    aktuális.setBackground(getAktuálisHáttérszín());
                    beirt++;
                    frissítÁllapotsor();
                    Kezelo.frissítDarabszám(t);
                    frissítTáblázat();
                }
            }
        }
        
        
        
        if(isVégeAJátéknak()){
            felugróAblak.setVisible(true);
            logger.info("Játék befejeződött.");
        }
        
        
    }//GEN-LAST:event_JTextFieldKeyReleased

    
    private boolean isVégeAJátéknak(){
        if(Ellenor.isHelyesATábla(t)){
            jatekIndult = false;
            vége = true;
            állapotsor.setForeground(Color.BLUE);
            állapotsor.setText("Nincs több lépés.");
            játékÚjrakezdéseMenüpont.setEnabled(false);
            for(JTextField jf : cellak){
                jf.setEditable(false);
            }
            játékMentéseMenüpont.setEnabled(false);
            műveletekMenü.setEnabled(false);
            üzenet.setForeground(Color.BLACK);
            felugróAblak.setTitle("Játék vége");
            felugróAblak.setSize(250, 100);
            üzenet.setText("Gratulálok, Ön nyert!");
            return true;
        }
        return false;
    }
    
    
    private void frissítÁllapotsor(){
        állapotsor.setForeground(Color.BLUE);
        állapotsor.setText(ELEMSZAM - (megadott + beirt) + " számjegyet kell még beírni.");
    }
    
    private void nullázSzámlálók(){
        megadott = 0;
        beirt = 0;
        lépésSzám = 0;
        logger.info("Számlálók kinullázva.");
    }
    
    private void frissítTáblázat(){
        
        
           String cella1 = "";
           String cella2 = "";
           String cella3 = "";
           String cella4 = "";
           String cella5 = "";
           String cella6 = "";
           String cella7 = "";
           String cella8 = "";
           String cella9 = "";
        
        if(mennyiségMutatásaMenüpont.getState()){
            cella1 = String.valueOf(t.getCellaDarabszám(1));
            cella2 = String.valueOf(t.getCellaDarabszám(2));
            cella3 = String.valueOf(t.getCellaDarabszám(3));
            cella4 = String.valueOf(t.getCellaDarabszám(4));
            cella5 = String.valueOf(t.getCellaDarabszám(5));
            cella6 = String.valueOf(t.getCellaDarabszám(6));
            cella7 = String.valueOf(t.getCellaDarabszám(7));
            cella8 = String.valueOf(t.getCellaDarabszám(8));
            cella9 = String.valueOf(t.getCellaDarabszám(9));
        }
        
        táblázat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", cella1},
                {"2", cella2},
                {"3", cella3},
                {"4", cella4},
                {"5", cella5},
                {"6", cella6},
                {"7", cella7},
                {"8", cella8},
                {"9", cella9}
            },
            new String [] {
                "Számjegy", "Beírandó"
            }
        ) );
        logger.info("Táblázat frissítve.");
    }
    
    
    /*
        Visszaadja az aktuális cella háttérszínét
    */
    public Color getAktuálisHáttérszín(){
        if(hibás.contains(aktuális)){
            return Color.RED;
        }
        
        if(kapcsolódóMezőkMenüpont.getState()){
            return  Color.GREEN;
        }
            
        return Color.WHITE;
    }
    
    
    /*
        "Kapcsolódó mezők..." funkció be - és kikapcsolástát figyeli 
    */
    private void jCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxItemStateChanged
        // TODO add your handling code here:
        //be van pipálva a "Kapcsolódó mezők mutatása " jelölőnégyzet
        logger.info(" Kapcsolódó mezők mutatása jelölőnégyzet állapota megváltozott.");
        for(JTextField cella : cellak){
                if(!cella.getFont().isBold()){
                    cella.setBackground(Color.WHITE);
                }else{
                    cella.setBackground(Color.GRAY);
                }
                if(hibás.contains(cella)){
                    cella.setBackground(Color.RED);
                }
        }

        if(kapcsolódóMezőkMenüpont.getState()){
            
                int index = cellak.indexOf(aktuális);
                int aktsor = (index/9)%3;
                int aktoszlop = (index%9)%3;
                
                double aktX = aktuális.getLocation().getX();
                double aktY = aktuális.getLocation().getY();
            
            for(JTextField cella :cellak){
                 
                double x = cella.getLocation().getX();
                double y = cella.getLocation().getY();
                if(cella == aktuális){
                    cella.setBackground(Color.GREEN);
                } else{
                    
                    if(x == aktX){
                        cella.setBackground(Color.yellow);
                    }
                    if(y == aktY){
                        cella.setBackground(Color.yellow);
                    }

                    if(aktsor == 0 && aktoszlop == 0){
                           cellak.get(index+9+1).setBackground(Color.yellow);
                           cellak.get(index+9+2).setBackground(Color.yellow);
                           cellak.get(index+9+9+1).setBackground(Color.yellow);
                           cellak.get(index+9+9+2).setBackground(Color.yellow);
                    }

                    if(aktsor == 0 && aktoszlop == 1){
                           cellak.get(index+9-1).setBackground(Color.yellow);
                           cellak.get(index+9+1).setBackground(Color.yellow);
                           cellak.get(index+9+9-1).setBackground(Color.yellow);
                           cellak.get(index+9+9+1).setBackground(Color.yellow);
                    }

                    if(aktsor == 0 && aktoszlop == 2){
                           cellak.get(index+9-2).setBackground(Color.yellow);
                           cellak.get(index+9-1).setBackground(Color.yellow);
                           cellak.get(index+9+9-2).setBackground(Color.yellow);
                           cellak.get(index+9+9-1).setBackground(Color.yellow);
                    }
                    
                    if(aktsor == 1 && aktoszlop == 0){
                           cellak.get(index-9+1).setBackground(Color.yellow);
                           cellak.get(index-9+2).setBackground(Color.yellow);
                           cellak.get(index+9+1).setBackground(Color.yellow);
                           cellak.get(index+9+2).setBackground(Color.yellow);
                    }
                    
                    if(aktsor == 1 && aktoszlop == 1){
                           cellak.get(index-9-1).setBackground(Color.yellow);
                           cellak.get(index-9+1).setBackground(Color.yellow);
                           cellak.get(index+9-1).setBackground(Color.yellow);
                           cellak.get(index+9+1).setBackground(Color.yellow);
                    }
                    
                    if(aktsor == 1 && aktoszlop == 2){
                           cellak.get(index-9-2).setBackground(Color.yellow);
                           cellak.get(index-9-1).setBackground(Color.yellow);
                           cellak.get(index+9-2).setBackground(Color.yellow);
                           cellak.get(index+9-1).setBackground(Color.yellow);
                    }
                    
                    if(aktsor == 2 && aktoszlop == 0){
                           cellak.get(index-9+1).setBackground(Color.yellow);
                           cellak.get(index-9+2).setBackground(Color.yellow);
                           cellak.get(index-9-9+1).setBackground(Color.yellow);
                           cellak.get(index-9-9+2).setBackground(Color.yellow);
                    }
                    
                    if(aktsor == 2 && aktoszlop == 1){
                           cellak.get(index-9-1).setBackground(Color.yellow);
                           cellak.get(index-9+1).setBackground(Color.yellow);
                           cellak.get(index-9-9-1).setBackground(Color.yellow);
                           cellak.get(index-9-9+1).setBackground(Color.yellow);
                    }
                    
                    if(aktsor == 2 && aktoszlop == 2){
                           cellak.get(index-9-1).setBackground(Color.yellow);
                           cellak.get(index-9-2).setBackground(Color.yellow);
                           cellak.get(index-9-9-1).setBackground(Color.yellow);
                           cellak.get(index-9-9-2).setBackground(Color.yellow);
                    } 
                }
            }
            
            for(JTextField cella : cellak){
                if(cella.getFont().isBold() && cella.getBackground() == Color.YELLOW){
                    cella.setBackground(Color.LIGHT_GRAY);
                }
                if(hibás.contains(cella)){
                    cella.setBackground(Color.RED);
                }
            }
            
        }
        
        
    }//GEN-LAST:event_jCheckBoxItemStateChanged

    
    
    /*
        JTextField aktuálissá válását figyelő listener
    */
    private void jTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldFocusGained
        // TODO add your handling code here:
        
        if(jatekIndult){
            aktuális = (JTextField)evt.getSource();
            aktuálisCellaTartalma = aktuális.getText();
            frissítÁllapotsor();
           if(kapcsolódóMezőkMenüpont.getState() == true){
               jCheckBoxItemStateChanged(null);
           }
        }
        
    }//GEN-LAST:event_jTextFieldFocusGained

    
    
    /*
        névjegy menüpont listener-je
    */
    private void útmutatóMenüpontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_útmutatóMenüpontActionPerformed
        // TODO add your handling code here:
       //infoPanel.setVisible(true);
    }//GEN-LAST:event_útmutatóMenüpontActionPerformed

    
    /*
        Aktuális játék kimentése
    */
    private void játékMentéseMenüpontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_játékMentéseMenüpontActionPerformed
        // TODO add your handling code here:
        
        for(JTextField jtf : cellak){
            if(jtf.getBackground() == Color.RED){
                
                
                üzenet.setForeground(Color.RED);
                felugróAblak.setTitle("Sikertelen mentés!");
                felugróAblak.setSize(300, 100);
                üzenet.setText("A tábla hibás értéket tartalmaz!");
                felugróAblak.setVisible(true);
                return;
            } 
        }
        
        
        üzenet.setForeground(Color.BLUE);
        felugróAblak.setSize(300, 120);
        felugróAblak.setTitle("Sikeres mentés!");
        üzenet.setText("Aktuális játék sikeresen kimentve!");
        felugróAblak.setVisible(true);

        Kezelo.kimentFájlba(t, lépésSzámláló.getText());
        
    }//GEN-LAST:event_játékMentéseMenüpontActionPerformed

    
    /*
        mentett játék betöltése
    */
    private void játékBetöltéseMenüpontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_játékBetöltéseMenüpontActionPerformed
        // TODO add your handling code here:
        jatekIndult = true;
        Kezelo.kiürit(t);
        hibás.clear();
        nullázSzámlálók();
        lépésSzám = Integer.parseInt(Kezelo.betöltFájlból(t, String.valueOf(lépésSzám)));
        if(lépésSzám == -1){
            üzenet.setForeground(Color.RED);
            felugróAblak.setSize(300, 120);
            felugróAblak.setTitle("Sikertelen betöltés!");
            üzenet.setText("Még nincs mentett játék!");
            felugróAblak.setVisible(true);
            return;
        } else {
            üzenet.setForeground(Color.BLUE);
            felugróAblak.setSize(300, 120);
            felugróAblak.setTitle("Sikeres betöltés!");
            üzenet.setText("A korábbi mentés visszatöltve!");
            felugróAblak.setVisible(true);
        }
        lépésSzámláló.setText(String.valueOf(lépésSzám));       
        feltolt();
        betolt();
        frissítÁllapotsor();
        műveletekMenü.setEnabled(true);
        játékÚjrakezdéseMenüpont.setEnabled(true);
        kapcsolódóMezőkMenüpont.setEnabled(true);
        mennyiségMutatásaMenüpont.setEnabled(true);
        játékMentéseMenüpont.setEnabled(true);
        lépésSzámCímke.setEnabled(true);
        lépésSzámláló.setEnabled(true);
    }//GEN-LAST:event_játékBetöltéseMenüpontActionPerformed

    private void mennyiségMutatásaMenüpontItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mennyiségMutatásaMenüpontItemStateChanged
        // TODO add your handling code here:
        logger.info("Mennyiségek mutatása jelölőnégyzet állapota változott.");
        if(mennyiségMutatásaMenüpont.getState()){
            táblázat.setEnabled(true);
        }else{
            táblázat.setEnabled(false);
        }
        
        Kezelo.frissítDarabszám(t);
        frissítTáblázat();
        
    }//GEN-LAST:event_mennyiségMutatásaMenüpontItemStateChanged

    
    
    /*
        A felület megjelenítéséért felelős fő rutin
    */
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FelhasznaloiFelulet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FelhasznaloiFelulet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FelhasznaloiFelulet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FelhasznaloiFelulet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                FelhasznaloiFelulet ff = new FelhasznaloiFelulet();
                ff.setVisible(true);
                
            }
        });
        
        
    }
    
    
    
    /*
        Feltölti a cellák listáját a szövegmezőkkel 
     */
    private void feltolt(){
         
        cellak.clear(); 
         
        cellak.add(jTextField1);
        cellak.add(jTextField2);
        cellak.add(jTextField3);
        cellak.add(jTextField4);
        cellak.add(jTextField5);
        cellak.add(jTextField6);
        cellak.add(jTextField7);
        cellak.add(jTextField8);
        cellak.add(jTextField9);
        
        cellak.add(jTextField10);
        cellak.add(jTextField11);
        cellak.add(jTextField12);
        cellak.add(jTextField13);
        cellak.add(jTextField14);
        cellak.add(jTextField15);
        cellak.add(jTextField16);
        cellak.add(jTextField17);
        cellak.add(jTextField18);
        cellak.add(jTextField19);
        
        cellak.add(jTextField20);
        cellak.add(jTextField21);
        cellak.add(jTextField22);
        cellak.add(jTextField23);
        cellak.add(jTextField24);
        cellak.add(jTextField25);
        cellak.add(jTextField26);
        cellak.add(jTextField27);
        cellak.add(jTextField28);
        cellak.add(jTextField29);
        
        cellak.add(jTextField30);
        cellak.add(jTextField31);
        cellak.add(jTextField32);
        cellak.add(jTextField33);
        cellak.add(jTextField34);
        cellak.add(jTextField35);
        cellak.add(jTextField36);
        cellak.add(jTextField37);
        cellak.add(jTextField38);
        cellak.add(jTextField39);
        
        cellak.add(jTextField40);
        cellak.add(jTextField41);
        cellak.add(jTextField42);
        cellak.add(jTextField43);
        cellak.add(jTextField44);
        cellak.add(jTextField45);
        cellak.add(jTextField46);
        cellak.add(jTextField47);
        cellak.add(jTextField48);
        cellak.add(jTextField49);
        
        cellak.add(jTextField50);
        cellak.add(jTextField51);
        cellak.add(jTextField52);
        cellak.add(jTextField53);
        cellak.add(jTextField54);
        cellak.add(jTextField55);
        cellak.add(jTextField56);
        cellak.add(jTextField57);
        cellak.add(jTextField58);
        cellak.add(jTextField59);
        
        cellak.add(jTextField60);
        cellak.add(jTextField61);
        cellak.add(jTextField62);
        cellak.add(jTextField63);
        cellak.add(jTextField64);
        cellak.add(jTextField65);
        cellak.add(jTextField66);
        cellak.add(jTextField67);
        cellak.add(jTextField68);
        cellak.add(jTextField69);
        
        cellak.add(jTextField70);
        cellak.add(jTextField71);
        cellak.add(jTextField72);
        cellak.add(jTextField73);
        cellak.add(jTextField74);
        cellak.add(jTextField75);
        cellak.add(jTextField76);
        cellak.add(jTextField77);
        cellak.add(jTextField78);
        cellak.add(jTextField79);
        
        cellak.add(jTextField80);
        cellak.add(jTextField81); 
        
    }
     
    
    
    /*
        A szövegmezőkbe betölti az értékeket a táblából és formázásokat hajt végre
    */
    private void betolt(){
        
        Kezelo.init(t);
        Kezelo.frissítDarabszám(t);
        frissítTáblázat();
         
        int szamlalo = 0;
        for (int i = 1; i < 10; i++) {
            for (int j = 1; j < 10; j++) {
                cellak.get(szamlalo).setDocument(new JTextFieldLimit(1));
                cellak.get(szamlalo).setText(t.getAktuálisCella(i, j).getTartalom());
                szamlalo++;
            }
        }
         
         
        megadott = 0;
        
        int index = 0;
        for(JTextField cella : cellak){
            index = cellak.indexOf(cella);
            if(t.getAktuálisCella(index/9 + 1, index%9 + 1).getÁllapot() != Allapot.MEGADOTT){
                cella.setEditable(true);
                cella.setForeground(Color.BLUE);
                cella.setBackground(Color.WHITE);
                cella.setToolTipText(null);
                if(!cella.getText().isEmpty()){
                    beirt++;
                }
            }else{
                cella.setBackground(Color.GRAY);
                cella.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
                megadott++;
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog felugróAblak;
    private javax.swing.JMenu fájlMenü;
    private javax.swing.JScrollPane infoPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField18;
    private javax.swing.JTextField jTextField19;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField20;
    private javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField22;
    private javax.swing.JTextField jTextField23;
    private javax.swing.JTextField jTextField24;
    private javax.swing.JTextField jTextField25;
    private javax.swing.JTextField jTextField26;
    private javax.swing.JTextField jTextField27;
    private javax.swing.JTextField jTextField28;
    private javax.swing.JTextField jTextField29;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField30;
    private javax.swing.JTextField jTextField31;
    private javax.swing.JTextField jTextField32;
    private javax.swing.JTextField jTextField33;
    private javax.swing.JTextField jTextField34;
    private javax.swing.JTextField jTextField35;
    private javax.swing.JTextField jTextField36;
    private javax.swing.JTextField jTextField37;
    private javax.swing.JTextField jTextField38;
    private javax.swing.JTextField jTextField39;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField40;
    private javax.swing.JTextField jTextField41;
    private javax.swing.JTextField jTextField42;
    private javax.swing.JTextField jTextField43;
    private javax.swing.JTextField jTextField44;
    private javax.swing.JTextField jTextField45;
    private javax.swing.JTextField jTextField46;
    private javax.swing.JTextField jTextField47;
    private javax.swing.JTextField jTextField48;
    private javax.swing.JTextField jTextField49;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField50;
    private javax.swing.JTextField jTextField51;
    private javax.swing.JTextField jTextField52;
    private javax.swing.JTextField jTextField53;
    private javax.swing.JTextField jTextField54;
    private javax.swing.JTextField jTextField55;
    private javax.swing.JTextField jTextField56;
    private javax.swing.JTextField jTextField57;
    private javax.swing.JTextField jTextField58;
    private javax.swing.JTextField jTextField59;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField60;
    private javax.swing.JTextField jTextField61;
    private javax.swing.JTextField jTextField62;
    private javax.swing.JTextField jTextField63;
    private javax.swing.JTextField jTextField64;
    private javax.swing.JTextField jTextField65;
    private javax.swing.JTextField jTextField66;
    private javax.swing.JTextField jTextField67;
    private javax.swing.JTextField jTextField68;
    private javax.swing.JTextField jTextField69;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField70;
    private javax.swing.JTextField jTextField71;
    private javax.swing.JTextField jTextField72;
    private javax.swing.JTextField jTextField73;
    private javax.swing.JTextField jTextField74;
    private javax.swing.JTextField jTextField75;
    private javax.swing.JTextField jTextField76;
    private javax.swing.JTextField jTextField77;
    private javax.swing.JTextField jTextField78;
    private javax.swing.JTextField jTextField79;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField80;
    private javax.swing.JTextField jTextField81;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JMenuItem játékBetöltéseMenüpont;
    private javax.swing.JMenuItem játékMentéseMenüpont;
    private javax.swing.JMenuItem játékÚjrakezdéseMenüpont;
    private javax.swing.JCheckBoxMenuItem kapcsolódóMezőkMenüpont;
    private javax.swing.JMenuItem kilépésMenüpont;
    private javax.swing.JLabel lépésSzámCímke;
    private javax.swing.JLabel lépésSzámláló;
    private javax.swing.JCheckBoxMenuItem mennyiségMutatásaMenüpont;
    private javax.swing.JMenuBar menüsor;
    private javax.swing.JMenu műveletekMenü;
    private javax.swing.JMenuItem névjegyMenüpont;
    private javax.swing.JMenu súgóMenü;
    private javax.swing.JTable táblázat;
    private javax.swing.JLabel állapotsor;
    private javax.swing.JMenuItem újJátékMenüpont;
    private javax.swing.JMenuItem útmutatóMenüpont;
    private javax.swing.JLabel üzenet;
    // End of variables declaration//GEN-END:variables
    
    
    
// a JTextField-be írható maximális karakterszámot megadó belső osztály 
private class JTextFieldLimit extends PlainDocument {
    private final int limit;
    
    JTextFieldLimit(int limit) {
      super();
      this.limit = limit;
    }

    @Override
    public void insertString(int offset, String str, AttributeSet attr) throws BadLocationException {
      if (str == null) {
          return;
      }

      if ((getLength() + str.length()) <= limit) {
        super.insertString(offset, str, attr);
      }
      
    }
  }


}

